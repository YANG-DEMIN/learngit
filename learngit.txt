1. 查看、修改用户名和邮箱地址
	$ git config user.name
	$ git config user.email
	$ git config --global user.name "username"
	$ git config --global user.email "email"
	git config --global --unset http.proxy
	git config --global --unset https.proxy

2. 查看文件修改内容  git diff "filename"
	查看工作区与版本库最新版本区别： git diff HEAD --"filename"
3. 查看版本库、历史记录	git log / git log --pretty=oneline
	树状图$ git log --graph --pretty=oneline --abbrev-commit
4. 版本回退 git reset --hard HEAD^ (/id)
5. 查看每次的操作命令 git reflog
6. 撤回工作区的修改 git checkout --filename，回到最近一次git commit、add的状态
	注意需要加--, 不然就是切换分支
7. 撤回暂存区的修改 git reset HEAD <file>
8. 代理
	git config --global http.proxy 'socks5://127.0.0.1:1080'
	git config --global https.proxy 'socks5://127.0.0.1:1080'
	git config --global https.proxy http://127.0.0.1:8080
	git config --global https.proxy https://127.0.0.1:8080

	git config --global --unset http.proxy
	git config --global --unset https.proxy
9. 代理情况下，添加远程仓库时需要使用https:模式，而非ssh:
10. 创建并切换分支
	$ git checkout -b dev = 
	$ git branch dev
	$ git checkout dev
11. 合并分支
	1. 添加并提交相应文件
	2. 切换回master
	3. git merge dev
12. 合并冲突分支
	git status 查看相应文件状态并修改冲突
13. 分支合并类型
	Fast forward 在删除分支后会丢掉分支信息
	--no -ff 在合并后会创建一个commit，从中可以看出分支信息
	$ git merge --no-ff -m "merge with no-ff" dev
14. 修复bug
	1. 修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
	2. 当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场；
	3. 在master分支上修复的bug，想要合并到当前dev分支，可以用git cherry-pick <commit>命令，把bug提交的修改“复制”到当前分支，避免重复劳动。
15. 创建master以外的远程分支 $ git checkout -b dev origin/dev
	制定本地分支与远程分支的连接$ git branch --set-upstream-to=origin/dev dev
16. 标签
	命令git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
	命令git tag -a <tagname> -m "blablabla..."可以指定标签信息；
	本地标签全部推送到远程分支 git push --tags
	命令git tag可以查看所有标签
	删除标签: 先删除本地标签 git tag -d <tagname>
			再删除远程标签 git push origin -delete <tagname>
	在PX4中，有时候会对标签格式进行检测，不符合时无法通过编译，因此最好不要随便打标签（主要是我没搞明白）
	
17. 子模块克隆 git clone http://*** + git submodule update --init --recursive
			或者 git clone --recurisive http://***
18. 拉取特定分支到本地
	git pull/fetch origin <remote branch name>
19. 本地到远程
	1. git branch -r 查看远程库的分支情况
	2. 创建本地分支或者切换至需要提交的分支上去
	3. 创建并建立远程分支链接 
		git push --set-upstream origin <branch name>
	（强制提交） git push origin <branch name> --force
20. 远程代码与本地代码冲突时：
		git stash	暂存本地更改
		git pull 	下拉更新
		git stash pop	调出本地更改
	强制覆盖
		git reset --hard
		git pull
